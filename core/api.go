package core

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strings"

	"github.com/gin-gonic/gin"
)

var URL = func(lang, word string) string {
	return fmt.Sprintf("https://od-api.oxforddictionaries.com/api/v2/entries/%s/%s", lang, strings.ToLower(word))
}

func Handler(c *gin.Context, appid, appkey, lang string) {
	param := struct {
		Word string `form:"word"`
		Mode string `form:"mode"`
	}{}
	err := c.BindQuery(&param)
	if err != nil {
		c.JSON(418, gin.H{
			"error": err.Error(),
		})
		return
	}
	req, err := http.NewRequest(http.MethodGet, URL(lang, param.Word), nil)
	if err != nil {
		c.JSON(418, gin.H{
			"error": err.Error(),
		})
		return
	}
	req.Header.Add("app_id", appid)
	req.Header.Add("app_key", appkey)
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		c.JSON(418, gin.H{
			"error": err.Error(),
		})
		return
	}
	defer resp.Body.Close()
	var buf bytes.Buffer
	io.Copy(&buf, resp.Body)
	if resp.StatusCode != 200 {
		c.JSON(418, gin.H{
			"error":  fmt.Sprintf("status %d", resp.StatusCode),
			"reason": buf.String(),
		})
		return
	}
	m := AutoGenerated{}
	dec := json.NewDecoder(&buf)
	err = dec.Decode(&m)
	if err != nil {
		c.JSON(418, gin.H{
			"error": err.Error(),
		})
		return
	}
	if param.Mode == "origin" {
		c.JSON(200, json.RawMessage(buf.Bytes()))
	} else {
		c.JSON(200, NeatAutoGenerated(&m))
	}
}
