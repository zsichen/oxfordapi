package main

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/zsichen/oxfordapi/core"
)

var (
	appid  string
	appkey string
	lang   string
)

func handleRequest(ctx context.Context, request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	fmt.Printf("path: %s resource %s\n ua %s",
		request.Path, request.Resource, request.RequestContext.Identity.UserAgent)
	param := struct {
		Word string `json:"word"`
		Mode string `json:"mode"`
	}{}
	var ok bool
	if param.Word, ok = request.QueryStringParameters["word"]; ok {
		return events.APIGatewayProxyResponse{Body: "Missing require parameter", StatusCode: 418}, nil
	}
	param.Mode = request.QueryStringParameters["mode"]
	res, err := core.OxfordAPIRequest(appid, appkey, lang, param.Word)
	if err != nil {
		return events.APIGatewayProxyResponse{Body: err.Error(), StatusCode: 418}, nil
	}
	if param.Mode == "origin" {
		return events.APIGatewayProxyResponse{Body: string(res), StatusCode: 200}, nil
	}
	tmp := &core.AutoGenerated{}
	json.Unmarshal(res, &tmp)
	neatStr, _ := json.Marshal(core.NeatAutoGenerated(tmp))
	return events.APIGatewayProxyResponse{Body: string(neatStr), StatusCode: 200}, nil
}

func main() {
	lambda.Start(handleRequest)
}
