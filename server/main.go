package main

import (
	"encoding/json"
	"flag"
	"io/ioutil"
	"log"

	"github.com/gin-gonic/gin"
	"github.com/zsichen/oxfordapi/core"
)

var cmd = struct {
	AppId  string `json:"app_id"`
	AppKey string `json:"app_key"`
	Port   string `json:"port"`
	Lang   string `json:"lang"`
	Config string `json:"-"`
}{}

func LoadConfig() error {
	buf, err := ioutil.ReadFile(cmd.Config)
	if err != nil {
		return err
	}
	return json.Unmarshal(buf, &cmd)
}

func main() {
	flag.StringVar(&cmd.Config, "config", "config.json", "config file")
	flag.StringVar(&cmd.Port, "port", "8080", "listen port")
	flag.StringVar(&cmd.Lang, "lang", "en-gb", "language code")
	flag.Parse()

	if err := LoadConfig(); err != nil {
		log.Fatalln(err)
	}

	router := gin.Default()
	router.GET("/quest", func(c *gin.Context) {
		param := struct {
			Word string `form:"word"`
			Mode string `form:"mode"`
		}{}
		err := c.BindQuery(&param)
		if err != nil {
			c.JSON(418, gin.H{
				"error": err.Error(),
			})
			return
		}
		res, err := core.OxfordAPIRequest(cmd.AppId, cmd.AppKey, cmd.Lang, param.Word)
		if err != nil {
			c.JSON(418, gin.H{
				"error": err.Error(),
			})
			return
		}
		if param.Mode == "origin" {
			c.JSON(200, json.RawMessage(res))
			return
		} else {
			tmp := &core.AutoGenerated{}
			json.Unmarshal(res, &tmp)
			c.JSON(200, core.NeatAutoGenerated(tmp))
			return
		}
	})
	router.Run(":" + cmd.Port)
}
